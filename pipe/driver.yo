                            | #######################################################################
                            | # Test for copying block of size K;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41006000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f2ffffffffffffffff | 	irmovq $K, %rdx		# src and dst have K elements
0x014: 30f68805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f77005000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 800204000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
                            | 
                            | # Best CPE: 6.80
                            | # Average CPE: 6.85
                            | # Best Score: 60.0
                            | # Bytes: 967
                            | 
0x03b: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x045: 723903000000000000   | 	jl Remain
                            | 
                            | # 8 members
0x04e:                      | Loop:
0x04e: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x058: 50970800000000000000 | 	mrmovq 8(%rdi),	%r9
0x062: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x06c: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x076: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x080: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x08a: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x094: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx
                            | 
0x09e: 6288                 | 	andq %r8, %r8
0x0a0: 76ff00000000000000   | 	jg Bin_1
0x0a9:                      | Bin_0:
0x0a9: 6299                 |     andq %r9, %r9
0x0ab: 760a01000000000000   |     jg Bin_10
0x0b4:                      | Bin_00:
0x0b4: 62aa                 |     andq %r10, %r10
0x0b6: 761501000000000000   |     jg Bin_100
0x0bf:                      | Bin_000:
0x0bf: 62bb                 |     andq %r11, %r11
0x0c1: 762001000000000000   |     jg Bin_1000
0x0ca:                      | Bin_0000:
0x0ca: 62cc                 |     andq %r12, %r12
0x0cc: 762b01000000000000   |     jg Bin_10000
0x0d5:                      | Bin_00000:
0x0d5: 62dd                 |     andq %r13, %r13
0x0d7: 763601000000000000   |     jg Bin_100000
0x0e0:                      | Bin_000000:
0x0e0: 62ee                 |     andq %r14, %r14 
0x0e2: 764101000000000000   | 	jg Bin_1000000
0x0eb:                      | Bin_0000000:
0x0eb: 6211                 | 	andq %rcx, %rcx
0x0ed: 764c01000000000000   |     jg Add_1
0x0f6: 70c202000000000000   | 	jmp Npos
                            | ####################
                            | 
0x0ff:                      | Bin_1:
0x0ff: 6299                 |     andq %r9, %r9
0x101: 765f01000000000000   |     jg Bin_11
0x10a:                      | Bin_10:
0x10a: 62aa                 |     andq %r10, %r10
0x10c: 766a01000000000000   |     jg Bin_110
0x115:                      | Bin_100:
0x115: 62bb                 |     andq %r11, %r11
0x117: 767501000000000000   |     jg Bin_1100
0x120:                      | Bin_1000:
0x120: 62cc                 |     andq %r12, %r12
0x122: 768001000000000000   |     jg Bin_11000
0x12b:                      | Bin_10000:
0x12b: 62dd                 |     andq %r13, %r13
0x12d: 768b01000000000000   |     jg Bin_110000
0x136:                      | Bin_100000:
0x136: 62ee                 |     andq %r14, %r14
0x138: 769601000000000000   | 	jg Bin_1100000	
0x141:                      | Bin_1000000:
0x141: 6211                 | 	andq %rcx, %rcx
0x143: 76a101000000000000   |     jg Add_2
0x14c:                      | Add_1:
0x14c: c0f00100000000000000 |     iaddq $1, %rax
0x156: 70c202000000000000   |     jmp Npos
                            | ####################
                            | 
0x15f:                      | Bin_11:
0x15f: 62aa                 |     andq %r10, %r10
0x161: 76b401000000000000   |     jg Bin_111
0x16a:                      | Bin_110:
0x16a: 62bb                 |     andq %r11, %r11
0x16c: 76bf01000000000000   |     jg Bin_1110
0x175:                      | Bin_1100:
0x175: 62cc                 |     andq %r12, %r12
0x177: 76ca01000000000000   |     jg Bin_11100
0x180:                      | Bin_11000:
0x180: 62dd                 |     andq %r13, %r13
0x182: 76d501000000000000   |     jg Bin_111000
0x18b:                      | Bin_110000:
0x18b: 62ee                 | 	andq %r14, %r14
0x18d: 76e001000000000000   |     jg Bin_1110000
0x196:                      | Bin_1100000:
0x196: 6211                 |     andq %rcx, %rcx
0x198: 76eb01000000000000   | 	jg Add_3
0x1a1:                      | Add_2:
0x1a1: c0f00200000000000000 |     iaddq $2, %rax
0x1ab: 70c202000000000000   |     jmp Npos
                            | ####################
                            | 
0x1b4:                      | Bin_111:
0x1b4: 62bb                 |     andq %r11, %r11
0x1b6: 76fe01000000000000   |     jg Bin_1111
0x1bf:                      | Bin_1110:
0x1bf: 62cc                 |     andq %r12, %r12
0x1c1: 760902000000000000   |     jg Bin_11110
0x1ca:                      | Bin_11100:
0x1ca: 62dd                 |     andq %r13, %r13
0x1cc: 761402000000000000   |     jg Bin_111100
0x1d5:                      | Bin_111000:
0x1d5: 62ee                 | 	andq %r14, %r14
0x1d7: 761f02000000000000   |     jg Bin_1111000
0x1e0:                      | Bin_1110000:
0x1e0: 6211                 |     andq %rcx, %rcx
0x1e2: 762a02000000000000   | 	jg Add_4	
0x1eb:                      | Add_3:
0x1eb: c0f00300000000000000 |     iaddq $3, %rax
0x1f5: 70c202000000000000   |     jmp Npos
                            | ####################
                            | 
0x1fe:                      | Bin_1111:
0x1fe: 62cc                 |     andq %r12, %r12
0x200: 763d02000000000000   |     jg Bin_11111
0x209:                      | Bin_11110:
0x209: 62dd                 | 	andq %r13, %r13
0x20b: 764802000000000000   | 	jg Bin_111110
0x214:                      | Bin_111100:
0x214: 62ee                 |     andq %r14, %r14
0x216: 765302000000000000   |     jg Bin_1111100
0x21f:                      | Bin_1111000:
0x21f: 6211                 |     andq %rcx, %rcx
0x221: 765e02000000000000   |     jg Add_5
0x22a:                      | Add_4:
0x22a: c0f00400000000000000 |     iaddq $4, %rax
0x234: 70c202000000000000   |     jmp Npos
                            | #####################
                            | 
0x23d:                      | Bin_11111:
0x23d: 62dd                 |     andq %r13, %r13
0x23f: 767102000000000000   |     jg Bin_111111
0x248:                      | Bin_111110:
0x248: 62ee                 |     andq %r14, %r14
0x24a: 767c02000000000000   |     jg Bin_1111110
0x253:                      | Bin_1111100:
0x253: 6211                 |     andq %rcx, %rcx
0x255: 768702000000000000   |     jg Add_6
0x25e:                      | Add_5:
0x25e: c0f00500000000000000 |     iaddq $5, %rax
0x268: 70c202000000000000   |     jmp Npos
                            | ####################
                            | 
0x271:                      | Bin_111111:
0x271: 62ee                 |     andq %r14, %r14
0x273: 769a02000000000000   |     jg Bin_1111111
0x27c:                      | Bin_1111110:
0x27c: 6211                 |     andq %rcx, %rcx
0x27e: 76a502000000000000   |     jg Add_7
0x287:                      | Add_6:
0x287: c0f00600000000000000 |     iaddq $6, %rax
0x291: 70c202000000000000   |     jmp Npos
                            | ###################
                            | 
0x29a:                      | Bin_1111111:
0x29a: 6211                 | 	andq %rcx, %rcx
0x29c: 76b802000000000000   | 	jg Add_8
0x2a5:                      | Add_7:
0x2a5: c0f00700000000000000 |     iaddq $7, %rax
0x2af: 70c202000000000000   | 	jmp Npos
                            | 
0x2b8:                      | Add_8:
0x2b8: c0f00800000000000000 | 	iaddq $8, %rax
                            | 
0x2c2:                      | Npos:
0x2c2: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x2cc: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x2d6: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x2e0: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x2ea: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x2f4: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x2fe: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x308: 40163800000000000000 | 	rmmovq %rcx, 56(%rsi)
                            | 
0x312: c0f74000000000000000 | 	iaddq $64, %rdi
0x31c: c0f64000000000000000 | 	iaddq $64, %rsi
0x326: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x330: 754e00000000000000   | 	jge Loop
                            | 
                            | # %rdx = 01234567
0x339:                      | Remain:
0x339: c0f20600000000000000 | 	iaddq $6, %rdx
0x343: 72c503000000000000   | 	jl Final
                            | 
0x34c:                      | Remain_Loop:
0x34c: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x356: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
                            | 
0x360: 6288                 | 	andq %r8, %r8
0x362: 717503000000000000   | 	jle R2
0x36b: c0f00100000000000000 | 	iaddq $1, %rax
0x375:                      | R2:
0x375: 6299                 | 	andq %r9, %r9
0x377: 718a03000000000000   | 	jle Remain_Npos
0x380: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x38a:                      | Remain_Npos:
0x38a: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x394: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x39e: c0f71000000000000000 | 	iaddq $16, %rdi
0x3a8: c0f61000000000000000 | 	iaddq $16, %rsi
0x3b2: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x3bc: 754c03000000000000   | 	jge Remain_Loop
                            | 
                            | # %rdx = 01
0x3c5:                      | Final:
0x3c5: c0f20100000000000000 | 	iaddq $1, %rdx
0x3cf: 720104000000000000   | 	jl Done
                            | 
0x3d8: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x3e2: 62aa                 | 	andq %r10, %r10
0x3e4: 40a60000000000000000 |     rmmovq %r10, (%rsi)
0x3ee: 710104000000000000   |     jle Done
0x3f7: c0f00100000000000000 |     iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x401:                      | Done:
0x401: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x402:                      | End:
                            | #/* $end ncopy-ys */
0x402:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x402:                      | check:
                            | 	# Return value test
0x402: 30fa0000000000000000 | 	irmovq $0,%r10
0x40c: 61a0                 | 	subq %r10,%rax
0x40e: 732a04000000000000   | 	je checkb
0x417: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x421: 706805000000000000   | 	jmp cdone
0x42a:                      | checkb:
                            | 	# Code length check
0x42a: 30f00204000000000000 | 	irmovq EndFun,%rax
0x434: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x43e: 6120                 | 	subq %rdx,%rax
0x440: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x44a: 6102                 | 	subq %rax,%rdx
0x44c: 756804000000000000   | 	jge checkm
0x455: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x45f: 706805000000000000   | 	jmp cdone
0x468:                      | checkm:
0x468: 30f28805000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x472: 30f37005000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x47c: 30f7ffffffffffffffff | 	irmovq $K,%rdi  # Count
0x486: 6277                 | 	andq %rdi,%rdi
0x488: 73e604000000000000   | 	je checkpre         # Skip check if count = 0
0x491:                      | mcloop:
0x491: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x49b: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x4a5: 6160                 | 	subq %rsi,%rax
0x4a7: 73c304000000000000   | 	je  mok
0x4b0: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x4ba: 706805000000000000   | 	jmp cdone
0x4c3:                      | mok:
0x4c3: 30f00800000000000000 | 	irmovq $8,%rax
0x4cd: 6002                 | 	addq %rax,%rdx	  # dest ++
0x4cf: 6003                 | 	addq %rax,%rbx    # src++
0x4d1: 30f00100000000000000 | 	irmovq $1,%rax
0x4db: 6107                 | 	subq %rax,%rdi    # cnt--
0x4dd: 769104000000000000   | 	jg mcloop
0x4e6:                      | checkpre:
                            | 	# Check for corruption
0x4e6: 30f28005000000000000 | 	irmovq Predest,%rdx
0x4f0: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x4fa: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x504: 6120                 | 	subq %rdx,%rax
0x506: 732205000000000000   | 	je checkpost
0x50f: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x519: 706805000000000000   | 	jmp cdone
0x522:                      | checkpost:
                            | 	# Check for corruption
0x522: 30f28805000000000000 | 	irmovq Postdest,%rdx
0x52c: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x536: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x540: 6120                 | 	subq %rdx,%rax
0x542: 735e05000000000000   | 	je checkok
0x54b: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x555: 706805000000000000   | 	jmp cdone
0x55e:                      | checkok:
                            | 	# Successful checks
0x55e: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x568:                      | cdone:
0x568: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x570:                      | 	.align 8
0x570:                      | src:
0x570: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x580:                      | 	.align 16
0x580:                      | Predest:
0x580: fadebc0000000000     | 	.quad 0xbcdefa
0x588:                      | dest:
0x588:                      | Postdest:
0x588: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x590:                      | .align 8
                            | # Run time stack
0x590: 0000000000000000     | 	.quad 0
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
                            | 
0x610:                      | Stack:
